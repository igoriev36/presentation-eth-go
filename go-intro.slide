Hacking Ethereum with Go
Part 1: Introduction to Go
4 Jul 2017

Roberet Zaremba
http://scale-it.pl

* Preface

Why I want to introduce Go?

Because of *Design*.

* Dichotomy

Fast to write _or_ fast to execute. Why not both?

.image go-intro/triangle.png 400 _


* Programming observations

- Manual memory management is a security risk
- People want static type checking
- Inheritance doesn't scale
- Languages become products in the long run
- CPUs are shipping with more and more cores
- Fast development cycle can lead to complex setups
- Maintenance matters


* How does Go fill the niche?

[Russ Cox:] We want to make programmers more effective at managing two kinds of scale:

- production scale, especially concurrent systems interacting with many other servers, exemplified today by cloud software;
- development scale, especially large codebases worked on by many engineers coordinating only loosely, exemplified today by modern open-source development.



* How does Go fill the niche?

Go aims to combine the safety and performance of a
statically typed compiled language with the *expressiveness*
and *convenience* of a dynamically typed interpreted
language.

Programming problems (and complexity) solved by *DESIGN*!

_Consensus_drove_the_design._Nothing_went_into_the_language_until_all_agreed_that_it_was_right._Some_features_didn’t_get_resolved_until_after_a_year_or_more_of_discussion._
-- Rob Pike

.image go-intro/gopher.png 200 _

* How does Go fill the niche? [2]

- Compiled (fast!)
- Safety
-- Statically typed
-- Garbage collected
-- Built-in concurrency

- No inheritance
- Structured (packages)
- Simple, concise syntax


* How does Go fill the niche? [3]

Tools by *design*

- `godoc`
- `gofmt`
- `go`test`
- `go`test`-bench=.`
- `go`vet` (logical check)
- race detector (`go`test`-race`)

and many more ...

* Who is using Go?

.image go-intro/go-users.jpg

* Who is using Go?

Many companies are moving (or moved) their core services to Go:

- Google (Download, Vitess, Kubernetes, Chrome and thousends "private" projectes)
- Docker
- Sendgrid - [[https://sendgrid.com/blog/convince-company-go-golang/][How to Convince Your Company to Go With Golang]]
- Uber [[https://eng.uber.com/go-geofence/][How We Built Uber Engineering’s Highest Query per Second Service Using Go]]
- Cloudflare: [[https://developers.soundcloud.com/blog/go-at-soundcloud][Railgun]] boost the back haul between CF data centers and clients' servers
- [[https://www.youtube.com/watch?v=JOx9enktnUM&list=PLtLJO5JKE5YALxdnGgvgwxTSmANOvyAo9&index=2][Go at Dropbox]]
- [[https://developers.soundcloud.com/blog/go-at-soundcloud][Go at SoundCloud]]
- Bitly [[http://word.bitly.com/post/29550171827/go-go-gadget][Go Go Gadget]]
- Twitter [[https://blog.twitter.com/engineering/en_us/a/2015/handling-five-billion-sessions-a-day-in-real-time.html][Handling five billion sessions a day – in real time]]
- Digitalocean
- Facebook (Parse ...)
- Hailo

* The State of Developer Ecosystem in 2017

[[https://www.jetbrains.com/research/devecosystem-2017/][JetBrains (Intellij creators)]]: In late 2016 and early 2017 we polled over 5,000 developers to identify the State of Developer Ecosystem. Here's what we learned.

.image go-intro/prog-lang-survey-key-takeways.png

* StackOverflow 2017 survey

[[https://insights.stackoverflow.com/survey/2017#most-loved-dreaded-and-wanted][Most Loved, Dreaded, and Wanted]]

.image go-intro/prog-lang-survey-most-wanted.png

.caption https://insights.stackoverflow.com/survey/2017#most-loved-dreaded-and-wanted

* Types

    type Animal struct {
        Name    string
        Speed   KmPerHour
        Parents [2]Animal
    }

Named types can have methods

    func (a Animal) MaxDistance(hours float64) float64 {
        return p.Speed * hours
    }

An interface:

   type Reader interface {
        Read(p []byte) (n int, err error)
    }

- There is no subclassing.
- Any types, even basic types such as integers and strings, can have methods.


* Predefined composite types

- `*X`
- `[]X`
- `[n]X`
- `map[X]Y`
- `chan` `X`
- `struct` `{`X,` `Y,` `...` `}`
- `func` `(X,` `Y,` `...)` `(Z,` `Q,` `...)`
- `interface` `{` `M(X)` `Y` ; `N(Z)` `Q` ; `...` `}`



* Write a Package

    package session

    import(
        "net/http"
        "time"
    )

    type SessionIdentifier string

    type Session struct {
        Id       int
        Username string
        Expires  time.Time
    }

    func InitSession(id SessionIdentifier) Session {
        //...
    }


* Import Libraries

Get it:

    $ go get github.com/blabla/session

Use it:

    package main

    import (
        "fmt"
        "net/http"
        "github.com/blabla/session"
    )

    func HandleHTTPRequest(rw http.ResponseWriter, rq *http.Request) {
        ck, _ := rq.Cookie("sessionId")
        sn := session.InitSession(ck.Value)
        fmt.Fprint(rw, sn.Username)
    }


* Polymorphism

No subtyping on concrete types. All types are invariant. We use *dynamic* interfaces!

    type error interface {
        Error() string
    }

Anything that has method called `Error()` returning a string can be used as an `error`.

    type ConnectionError struct{}

    func(e ConnectionError) Error() string {
        return "there was an error establishing a database connection"
    }

    func Connect(c Config) error {
        if a.Address == "" {
            return ConnectionError{}
        }
        ...
        return nil
    }


* Functions are first-class citizens

Lambdas with lexical scoping (closures):

    func QuoteOfTheDay(f func(string)) {
        f("Testing shows the presence, not the absence of bugs")
    }

    a := "Edsger Dijkstra"
    p := func(s string) {
        fmt.Println(s, "-", a)
    }

    QuoteOfTheDay(p)


* Concurrency is built-in

Goroutines are light-weight threads, sometimes called "fibers".

The `go` statement:

    func ExecuteJob(j int) {
        // long running process
    }

    jobId := 768

    go ExecuteJob(jobId) // executes in a new goroutine

    fmt.Println("Job", jobId, "is now running.")

`ExecuteJob` is now running in the background. But we don't know when it's finished!


* Did I mention that concurrency is part of Go design?

.play go-intro/workers.go /START OMIT/,/END OMIT/

.link https://blog.golang.org/pipelines More - pipelines examples


* More

- Effective Go:
.link https://golang.org/doc/effective_go.html
- Go Tour
.link https://tour.golang.org
